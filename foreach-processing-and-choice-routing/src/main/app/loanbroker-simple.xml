<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:context="http://www.springframework.org/schema/context" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd"
	version="EE-3.4.1">
    <context:property-placeholder location="conf/flow-properties.properties"/>

	<description>
		This Synchronous variant of loan broker example is modeled on the
		Enterprise integration Patterns book sample.
		See: http://www.eaipatterns.com/ComposedMessagingExample.html
	</description>

	<flow name="loan-broker-sync" doc:name="loan-broker-sync"
		doc:description="
The main loanbroker flow that:
i) Receives a customer request
ii) Performs a lookup of the customer credit profile using a component binding
iii) Determines the bank that should be used to request quotes
iv) Sends the request to the selected banks and aggregates responses
v) Selects the lowest quote from the list of quotes
vi) Returns the response to the client
		">
		<description>
			The main loanbroker flow that:
			i) Receives a customer request
			ii) Performs a lookup of the customer credit profile using a component
			binding
			iii) Determines the bank that should be used to request quotes
			iv) Sends the request to the selected banks and aggregates responses
			v) Selects the lowest quote from the list of quotes
			vi) Returns the response to the client
		</description>

		<http:inbound-endpoint address="http://0.0.0.0:11081"
			exchange-pattern="request-response" doc:name="HTTP" />

		<http:body-to-parameter-map-transformer
			doc:name="Body to Parameter Map" />

		<choice doc:name="Choice">
			<when
				expression="!(payload['name'] == null || payload['ssn'] == null || payload['amount'] == null || payload['term']==null)">
				<expression-component doc:name="create customer request">
					import org.mule.example.loanbroker.message.CustomerQuoteRequest;
					import org.mule.example.loanbroker.model.Customer;

					payload = new CustomerQuoteRequest(new Customer(payload['name'],
					Integer.parseInt(payload['ssn'])),
					Integer.parseInt(payload['amount']),
					Integer.parseInt(payload['term']));
				</expression-component>

				<enricher source="#[payload]" target="#[flowVars['creditProfile']]"
					doc:name="Enrich with creditProfile">
					<flow-ref name="lookupCustomerCreditProfile" doc:name="lookupCustomerCreditProfile" />
				</enricher>

				<enricher source="#[payload]" target="#[flowVars['banks']]"
					doc:name="Enrich with banks">
					<flow-ref name="lookupBanks" doc:name="lookupBanks" />
				</enricher>

				<set-variable variableName="quotes"
					value="#[new java.util.LinkedList()]" doc:name="create empty quotes" />
				<foreach collection="#[flowVars['banks']]" doc:name="Foreach">
					<enricher target="#[quotes.add($)]" doc:name="Message Enricher">
						<flow-ref name="lookupLoanQuote" doc:name="lookupLoanQuote" />
					</enricher>
				</foreach>

				<flow-ref name="findLowestLoanQuote" doc:name="findLowestLoanQuote" />

				<object-to-string-transformer doc:name="Object to String" />
			</when>
			<otherwise>
				<expression-component doc:name="set error message">payload="Error:
					incomplete request"</expression-component>
			</otherwise>
		</choice>

		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-payload value="Error processing loan request"
				doc:name="Set error message" />
		</catch-exception-strategy>
	</flow>

	<sub-flow name="lookupCustomerCreditProfile" doc:name="lookupCustomerCreditProfile"
		doc:description="
			Returns the customer credit profile obtained form the Credit Agency
		">
		<description>
			Returns the customer credit profile obtained form the Credit Agency
		</description>

		<set-payload value="#[payload.customer]" doc:name="customer" />

		<processor-chain doc:name="Processor Chain">
			<cxf:jaxws-client
				serviceClass="org.mule.example.loanbroker.creditagency.CreditAgencyService"
				operation="getCreditProfile" doc:name="getCreditProfile" />
			<http:outbound-endpoint
				address="http://localhost:18080/mule/TheCreditAgencyService"
				doc:name="HTTP" />
		</processor-chain>

		<logger level="INFO" message="Credit profile: #[payload]"
			doc:name="creditProfile" />
	</sub-flow>

	<sub-flow name="lookupBanks" doc:name="lookupBanks"
		doc:description="
			Returns the list of banks to contact and returns it as a flow variable
			'banks'
		">
		<description>
			Returns the list of banks to contact and returns it as a flow variable
			'banks'
		</description>

		<choice doc:name="Choice">
			<when expression="payload.getLoanAmount() &gt;= 20000">
				<expression-component doc:name="Bank1, Bank2">payload=[new
					java.net.URI('http://localhost:10080/mule/TheBank1'), new
					java.net.URI('http://localhost:20080/mule/TheBank2')]</expression-component>
			</when>
			<when
				expression="payload.getLoanAmount() &gt;= 10000 || payload.getLoanAmount() &lt;= 19999">
				<expression-component doc:name="Bank3, Bank4">payload=[new
					java.net.URI('http://localhost:30080/mule/TheBank3'), new
					java.net.URI('http://localhost:40080/mule/TheBank4')]</expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Bank5">payload=[new
					java.net.URI('http://localhost:50080/mule/TheBank5')]</expression-component>
			</otherwise>
		</choice>

		<logger level="INFO" message="Banks to contact: #[payload]"
			doc:name="banks" />
	</sub-flow>

	<sub-flow name="lookupLoanQuote" doc:name="lookupLoanQuote"
		doc:description="
			Returns a loanQuote from a given bank's URI
		">
		<description>
			Returns a loanQuote from a given bank's URI
		</description>

		<set-variable variableName="bankUri" value="#[payload]"
			doc:name="bankUri" />

		<expression-component doc:name="create LoanBrokerLoanRequest">
			import org.mule.example.loanbroker.message.LoanBrokerQuoteRequest;

			LoanBrokerQuoteRequest bqr = new LoanBrokerQuoteRequest();
			bqr.setCreditProfile(flowVars['creditProfile']);
			payload = bqr;
		</expression-component>

		<processor-chain doc:name="Processor Chain">
			<cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService"
				operation="getLoanQuote" doc:name="getLoanQuote" />
			<http:outbound-endpoint
				address="http://#[flowVars['bankUri'].getHost()]:#[flowVars['bankUri'].getPort()]#[flowVars['bankUri'].getPath()]"
				doc:name="HTTP" />
		</processor-chain>
		<logger message="LoanQuote from #[flowVars['bankUri']]: #[payload]"
			level="INFO" doc:name="quote" />
	</sub-flow>

	<sub-flow name="findLowestLoanQuote" doc:name="findLowestLoanQuote"
		doc:description="
			Returns the loan quote with the lowest interest rate
		">
		<description>
			Returns the loan quote with the lowest interest rate
		</description>

		<expression-component doc:name="Expression">
            <![CDATA[
            import org.mule.example.loanbroker.model.LoanQuote;

            LoanQuote lowestQuote = null;

            for (Object current : (List) flowVars['quotes'])
            {
                LoanQuote loanQuote = (LoanQuote) current;
                if (lowestQuote == null)
                {
                    lowestQuote = loanQuote;
                }
                else if (loanQuote.getInterestRate() < lowestQuote.getInterestRate())
                {
                    lowestQuote = loanQuote;
                }
            }

            payload = lowestQuote;
            ]]>
		</expression-component>
		<logger level="INFO" message="Lowest loan quote: #[payload]"
			doc:name="lowestQuote" />
	</sub-flow>

	<!-- MOCK SERVICES -->

	<flow name="TheCreditAgencyService" doc:name="TheCreditAgencyService"
		doc:description="
			The credit agency service will get the credit profile for a customer
		">
		<description>
			The credit agency service will get the credit profile for a customer
		</description>

		<http:inbound-endpoint
			address="http://localhost:18080/mule/TheCreditAgencyService"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service
			serviceClass="org.mule.example.loanbroker.creditagency.DefaultCreditAgency"
			doc:name="SOAP" />
		<component doc:name="creditAgency">
			<singleton-object
				class="org.mule.example.loanbroker.creditagency.DefaultCreditAgency" />
		</component>
	</flow>

	<flow name="Bank1Flow" doc:name="Bank1Flow"
		doc:description="
			Mock flow representing Bank 1
		">
		<description>
			Mock flow representing Bank 1
		</description>

		<http:inbound-endpoint address="http://localhost:10080/mule/TheBank1"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="org.mule.example.loanbroker.bank.Bank"
			doc:name="SOAP" />
		<component doc:name="Bank 1">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #1" />
			</singleton-object>
		</component>
	</flow>

	<flow name="Bank2Flow" doc:name="Bank2Flow"
		doc:description="
			Mock flow representing Bank 2
		">
		<description>
			Mock flow representing Bank 2
		</description>

		<http:inbound-endpoint address="http://localhost:20080/mule/TheBank2"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="org.mule.example.loanbroker.bank.Bank"
			doc:name="SOAP" />

		<component doc:name="Bank 2">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #2" />
			</singleton-object>
		</component>
	</flow>

	<flow name="Bank3Flow" doc:name="Bank3Flow"
		doc:description="
			Mock flow representing Bank 3
		">
		<description>
			Mock flow representing Bank 3
		</description>

		<http:inbound-endpoint address="http://localhost:30080/mule/TheBank3"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="org.mule.example.loanbroker.bank.Bank"
			doc:name="SOAP" />
		<component doc:name="Bank 3">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #3" />
			</singleton-object>
		</component>
	</flow>

	<flow name="Bank4Flow" doc:name="Bank4Flow"
		doc:description="
			Mock flow representing Bank 4
		">
		<description>
			Mock flow representing Bank 4
		</description>

		<http:inbound-endpoint address="http://localhost:40080/mule/TheBank4"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="org.mule.example.loanbroker.bank.Bank"
			doc:name="SOAP" />
		<component doc:name="Bank 4">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #4" />
			</singleton-object>
		</component>
	</flow>

	<flow name="Bank5Flow" doc:name="Bank5Flow"
		doc:description="
			Mock flow representing Bank 5
		">
		<description>
			Mock flow representing Bank 5
		</description>

		<http:inbound-endpoint address="http://localhost:50080/mule/TheBank5"
			exchange-pattern="request-response" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="org.mule.example.loanbroker.bank.Bank"
			doc:name="SOAP" />
		<component doc:name="Bank 5">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #5" />
			</singleton-object>
		</component>
	</flow>
</mule>
